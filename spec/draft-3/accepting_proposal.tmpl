<section title="Accepting OpenID Artifact Binding Request">

<t>When an End User request a OpenID Artifact Binding request, the OP SHOULD check if that request includes extensions. As described in "Sending Proposal", a CX Proposal JSON object has a member named "type" whose value is "http://specs.openid.net/cx/1.0/#proposal".
</t>

</section>


<section title="Verify Proposal">

<t>
If CX Proposal is contained as a OpenID extention and the End User is authenticated properly, OP SHOULD veify the proposal. "sighash" SHOULD be verify for no alteration.
</t>

<t>
All CX Signed Reqeust in "reqs" array MUST be verified. Because JSON objects in "reqs" are Magic Envelope, "sigs" of each JSON object MUST be verified with X.509 certificate decoded from "client_certs".
</t>

<t>
If Magic Envelope is valid, "data" MUST be decoded into CX Request and checked its content.
</t>

</section>

<section title="Grants from End User">
<t>
If CX Proposal is valid, OP MUST display "template" and what exactly each party requests. To compose a contract, the End User MUST agree the content displayed by OP.
</t>

</section>

<section title="Compose Acceptance for Each Request">

<t>
If the End User agree, OP creates two CX Acceptance JSON objects for each CX Request, one for data requesting party and the other for data responding party. 
Privacy parameter MAY be different from each other.
</t>

</section>


<section title="Compose Contracts">

<t>
OP provides  CX Contract JSON objects for all binding parties. Each Contract shares unique URI for "contract_id" member of it. 
All CX Acceptance JSON objects are stored in "acceptances" array member of that JSON object.
</t>

<t>
The original CX Proposal MUST be refered as "proposal_id" with its identifier. The digest of the Prooposal content MUST be appended as URI fragment.
</t>

<t>
OP MUST publish the contract in exchange for "contract_id" and "party_id" from a party in the form of Signed Contract which is the Magic Enveloped verion of the party's Contract.
</t>

</section>
